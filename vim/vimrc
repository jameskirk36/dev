set nu
set tabstop=3
source ~/.vim/syntax/scala.vim
syntax on


" Status Line -------------------------------- {{{
set noruler 
set laststatus=2 			"turn statusline on
set statusline=%.40f          " relative path to the file (limit of 40 chars)
set statusline+=\ %y        " Filetype of the file
set statusline+=\ %h%m%r   " display flags
set statusline+=%=     " switch to the right hand side
set statusline+=Current:\ %-4l\ Total:\ %-4L " current and total lines
" }}}

" Layout and Colours {{{
if has("gui_running")
" GUI {{{
	set lines=70 columns=150
	source $VIMRUNTIME/mswin.vim
	set guifont=Lucida_Console:h11
	colorscheme slate
	" Search colour
	highlight Search guibg=Yellow guifg=Black
	" Folded fold colour
	highlight Folded guibg=Black guifg=Blue
	" Word completion menu colour
	highlight Pmenu guibg=Magenta guifg=White
	" Word completion current selection colour
	highlight PmenuSel guibg=White guifg=Black
" }}}
else
" Console {{{
	" Search colour
	highlight Search ctermbg=Yellow ctermfg=Black 
	" Folded fold colour
	highlight Folded ctermbg=Black ctermfg=Blue
	" Word completion menu colour
	highlight Pmenu ctermbg=Magenta ctermfg=White
	" Word completion current selection colour
	highlight PmenuSel ctermbg=White ctermfg=Black
" }}}
end
" }}}
	
" Searching {{{
set incsearch " enable incremental search highlighting
set hlsearch " highlight search results 
" }}}
" Key mappings 
let mapleader="-"
" Key mappings: All Modes {{{
" Disable the left,right,up,down arrows 
noremap <left> <nop>
noremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>
" }}}

" Key mappings: normal mode {{{ 
" Open vim rc file
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" Apply recently changed vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>
" get out of highlighted search
nnoremap <CR> :nohlsearch<CR><CR>
" }}}

" Key mappings: Visual mode {{{ 

" Wrap visual selection in user provided arguments
vnoremap <leader>vw <esc>:VisualWrap<space>
" Custom command for calling WrapFunc helper
command! -nargs=* VisualWrap call WrapFunc(<f-args>)
" helper function for visual wrap (above)
function! WrapFunc(start, end)
	execute "normal `<i" . a:start . "\<esc>`>la" . a:end . "\<esc>"
endfunction
" }}}


" Abbreviations: Insert mode {{{
" replace @@<space> with email (when in insert mode) 
iabbrev @@ james.kirk84@gmail.com
" }}}


" language specific comment-line {{{
augroup GenericCommenting
	" clear autocommands in group
	autocmd! 
	autocmd FileType cs,cpp,javascript,scala let b:comment = "//"
	
	" comment current line using comment variable set by current buffer filetype
	autocmd FileType * nnoremap <buffer> <leader>cl :<c-u>execute "normal I" . b:comment<cr>
	" language specific comment-visual selection
	"autocmd FileType cpp,cs,javascript,scala vnoremap <buffer> <leader>cv <esc>`<i/*<esc>`>2la*/<esc>
augroup END
" }}}

" Vimscript specific ------------------------- {{{
augroup VimscriptSpecific
   autocmd!
	" Comment char
	autocmd FileType vim let b:comment = "\" "
   autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" Ruby specific {{{
augroup RubySpecific
	" clear autocommands in group
	autocmd!
	autocmd BufRead,BufNewFile *.rspec set filetype=ruby
	" comment char
	autocmd FileType ruby let b:comment = "#"
		
	" run rspec on current file
	autocmd FileType ruby nnoremap <buffer> <leader>rt :!rspec<space><c-r>%<cr>
	" new test
	autocmd FileType ruby nnoremap <buffer> <leader>nt Idescribe<space>func<space>do<cr>end<esc>?func<cr>
augroup END
" }}}

" Python specific {{{
augroup PythonSpecific
	autocmd!
	" comment char
	autocmd FileType python let b:comment = "#"
augroup END
" }}}
" C++ specific {{{
augroup CPPSpecific
	autocmd!
	" comment char
	autocmd FileType cpp let b:comment = "//"
augroup END
" }}}
" C# specific {{{
augroup CSharpSpecific
	autocmd!
	" comment char
	autocmd FileType cs let b:comment = "//"
	" abbreviation for insert mode to create empty if statement
	autocmd FileType cs execute "iabbrev <buffer> iff if ()<cr>{<cr>}<up><up><right><right><right>"
augroup END
" }}}
" Scala specific {{{
augroup ScalaSpecific
	autocmd!
	" comment char
	autocmd FileType scala let b:comment = "//"
augroup END
" }}}
" Javascript specific {{{
augroup JavascriptSpecific
	autocmd!
	" comment char
	autocmd FileType javascript let b:comment = "//"
augroup END
" }}}

" Example Operator mappings {{{
augroup OperatorMappings
	" inside heading example
	autocmd BufRead onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>
augroup END
" }}}
nnoremap <leader>ctags :!ctags -R .<cr>
